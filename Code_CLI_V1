#include <iostream>
#include <array>
#include <memory>

enum class CellState { Empty, X, O };

class Board {
private:
    std::array<CellState, 9> cells;

public:
    Board() { cells.fill(CellState::Empty); }

    void display() const {
        for (int i = 0; i < 9; ++i) {
            char symbol = ' ';
            if (cells[i] == CellState::X) symbol = 'X';
            else if (cells[i] == CellState::O) symbol = 'O';
            std::cout << "[" << symbol << "]";
            if ((i + 1) % 3 == 0) std::cout << "\n";
        }
    }

    bool makeMove(int index, CellState state) {
        if (index < 0 || index >= 9 || cells[index] != CellState::Empty) return false;
        cells[index] = state;
        return true;
    }

    bool isFull() const {
        for (auto cell : cells)
            if (cell == CellState::Empty)
                return false;
        return true;
    }

    CellState checkWinner() const {
        const int winCombos[8][3] = {
            {0,1,2}, {3,4,5}, {6,7,8}, // Rows
            {0,3,6}, {1,4,7}, {2,5,8}, // Cols
            {0,4,8}, {2,4,6}           // Diagonals
        };
        for (auto& combo : winCombos) {
            if (cells[combo[0]] != CellState::Empty &&
                cells[combo[0]] == cells[combo[1]] &&
                cells[combo[1]] == cells[combo[2]]) {
                return cells[combo[0]];
            }
        }
        return CellState::Empty;
    }
};

class Player {
private:
    std::string name;
    CellState symbol;

public:
    Player(std::string name, CellState symbol) : name(std::move(name)), symbol(symbol) {}

    std::string getName() const { return name; }
    CellState getSymbol() const { return symbol; }
};

class Game {
private:
    Board board;
    Player player1;
    Player player2;
    Player* current;

public:
    Game() 
        : player1("Player 1", CellState::X), 
          player2("Player 2", CellState::O), 
          current(&player1) {}

    void switchPlayer() {
        current = (current == &player1) ? &player2 : &player1;
    }

    void play() {
        int move;
        while (true) {
            board.display();
            std::cout << current->getName() << "'s turn (" 
                      << (current->getSymbol() == CellState::X ? 'X' : 'O') 
                      << "). Enter position (0-8): ";
            std::cin >> move;

            if (!board.makeMove(move, current->getSymbol())) {
                std::cout << "Invalid move. Try again.\n";
                continue;
            }

            CellState winner = board.checkWinner();
            if (winner != CellState::Empty) {
                board.display();
                std::cout << (winner == CellState::X ? player1.getName() : player2.getName())
                          << " wins!\n";
                break;
            }

            if (board.isFull()) {
                board.display();
                std::cout << "It's a draw!\n";
                break;
            }

            switchPlayer();
        }
    }
};

int main() {
    Game game;
    game.play();
    return 0;
}
